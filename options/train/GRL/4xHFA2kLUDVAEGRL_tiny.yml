# general settings
name: 4xHFA2kLUDVAEGRL_tiny
model_type: GeneralGANModel
scale: 4
num_gpu: auto
manual_seed: 0

# ----------------- options for synthesizing training data in ESWTGANModel ----------------- #
# USM the ground-truth
l1_gt_usm: False
percep_gt_usm: False
gan_gt_usm: False
gt_usm: False
high_order_degradation : False
try_autoamp_g: False #enable amp Automatic mixed precision for network_g. if loss inf or nan or error just set to False
try_autoamp_d: False #enable amp Automatic mixed precision for network_d. if loss inf or nan or error just set to False

# dataset and data loader settings
datasets:
  train:
    name: HFA2k_LUDVAE
    type: PairedImageDataset
    dataroot_gt: /home/phips/Documents/datasets/HFA2k_LUDVAE/HR
    dataroot_lq: /home/phips/Documents/datasets/HFA2k_LUDVAE/LR
    io_backend:
      type: disk

    gt_size: 128
    use_hflip: true
    use_rot: true

    # data loader
    num_worker_per_gpu: 4
    batch_size_per_gpu: 3
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: validation
    type: PairedImageDataset
    dataroot_gt: /home/phips/Documents/datasets/HFA2k_LUDVAE/VAL_HR
    dataroot_lq: /home/phips/Documents/datasets/HFA2k_LUDVAE/VAL_LR
    io_backend:
      type: disk

# network structures
network_g:
  type: GRL
  #upscale: 4
  #in_chans: 3
  #img_size: 64
  #window_size: 8
  #img_range: 1.
  #depths: [6, 6, 6, 6]
  #embed_dim: 60
  #num_heads: [6, 6, 6, 6]
  #mlp_ratio: 2
  #upsampler: 'pixelshuffledirect'
  #resi_connection: '1conv'
  
  upscale: 4
  in_channels: 3
  embed_dim: 64
  img_range: 1.
  img_size: 32 #input image size = gt_size/upscale = 640/4=160 #256/4=128 #128/3=32
  upsampler: pixelshuffledirect
  depths: [4, 4, 4, 4]
  num_heads_window: [2, 2, 2, 2]
  num_heads_stripe: [2, 2, 2, 2]
  window_size: 8
  stripe_size: [8, null]
  stripe_groups: [null, 4]
  stripe_shift: True
  mlp_ratio: 2
  qkv_proj_type: "linear"
  anchor_proj_type: "avgpool"
  anchor_one_stage: True
  anchor_window_down_factor: 4
  out_proj_type: "linear"
  conv_type: "1conv"
  init_method: "n"
  fairscale_checkpoint: False
  offload_to_cpu: False
  double_window: False
  stripe_square: False
  separable_conv_act: True
  local_connection: False
  use_buffer: True
  use_efficient_buffer: True
  euclidean_dist: False

network_d:
  type: UNetDiscriminatorSN
  num_in_ch: 3
  num_feat: 64
  skip_connection: True

# path
path:
  pretrain_network_g: # experiments/pretrained_models/grl_small_net_g_100000.pth
  param_key_g: params_ema
  strict_load_g: false
  #resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 2e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: Adam
    lr: !!float 2e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [400000] #at these iterations it will reduce the learning rate.
    gamma: 0.5

  total_iter: 400000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
  # perceptual loss (content and style losses)
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      # before relu
      "conv1_2": 0.1
      "conv2_2": 0.1
      "conv3_4": 1
      "conv4_4": 1
      "conv5_4": 1
    vgg_type: vgg19
    use_input_norm: true
    perceptual_weight: !!float 1.0
    style_weight: 0
    range_norm: false
    criterion: l1
  # contextual loss
  contextual_opt:
    type: ContextualLoss
    loss_weight: 0.5
    layer_weights:
      "conv_3_2": 1
      "conv_4_2": 1
    max_1d_size: 64
    distance_type: "cosine"
    calc_type: "regular"
    z_norm: false
    crop_quarter: false,
    b: 1.0
    band_width: 0.5
    use_vgg: true,
    net: vgg19
  color_opt:
    type: ColorLoss
    criterion: "l1"
    loss_weight: 1.0
  avg_opt:
    type: AverageLoss
    criterion: "l1"
    loss_weight: 1.0
    scale: 4
  # gan loss
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-1
    
  net_d_iters: 1
  net_d_init_iters: 0

# validation settings
val:
  val_freq: 1000
  save_img: true

  metrics:
    psnr:
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false
    ssim:
      type: calculate_ssim
      crop_border: 4
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: 1000
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
