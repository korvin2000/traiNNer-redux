# general settings
name: 2xHFA2kAVCCompact_multi
model_type: RealESRGANModel
scale: 2
num_gpu: auto  # auto: can infer from your visible devices automatically. official: 4 GPUs
manual_seed: 0

# ----------------- options for synthesizing training data in RealESRGANModel ----------------- #
# USM the ground-truth
l1_gt_usm: False
percep_gt_usm: False
gan_gt_usm: False
high_order_degradation : False
try_autoamp_g: False #enable amp Automatic mixed precision for network_g. if loss inf or nan or error just set to False
try_autoamp_d: False #enable amp Automatic mixed precision for network_d. if loss inf or nan or error just set to False

# dataset and data loader settings
datasets:
  train:
    name: HFA2k_LUDVAE
    type: PairedImageDataset
    dataroot_gt: /home/phips/Documents/datasets/HFA2k
    dataroot_lq: /home/phips/Documents/datasets/HFA2k_h264
    io_backend:
      type: disk

    gt_size: 128
    use_hflip: True
    use_rot: False

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 5
    batch_size_per_gpu: 4
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: validation
    type: PairedImageDataset
    dataroot_gt: /home/phips/Documents/datasets/HFA2kvalHR
    dataroot_lq: /home/phips/Documents/datasets/HFA2kvalLRh264
    io_backend:
      type: disk
# network structures
network_g:
  type: SRVGGNetCompact
  num_in_ch: 3
  num_out_ch: 3
  num_feat: 64
  num_conv: 16
  upscale: 2
  act_type: prelu


network_d:
  type: multiscale
  num_in_ch: 3
  num_feat: 64
  num_D: 2

# path
path:
  # use the pre-trained Real-ESRNet model
  pretrain_network_g: /home/phips/Documents/traiNNer-redux-FJ/experiments/pretrained_models/net_g_20000.pth
  param_key_g: params_ema
  strict_load_g: true
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: AdamW
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: AdamW
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [400000]
    gamma: 0.5

  total_iter: 400000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
  # perceptual loss (content and style losses)
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      # before relu
      'conv1_2': 0.1
      'conv2_2': 0.1
      'conv3_4': 1
      'conv4_4': 1
      'conv5_4': 1
    vgg_type: vgg19
    use_input_norm: true
    perceptual_weight: !!float 1.0
    style_weight: 0
    range_norm: false
    criterion: l1
  # gan loss
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-1

  net_d_iters: 1
  net_d_init_iters: 0

# Uncomment these for validation
val:
  val_freq: 1000
  save_img: true

  metrics:
    psnr:
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false
    ssim:
      type: calculate_ssim
      crop_border: 4
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 1e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
